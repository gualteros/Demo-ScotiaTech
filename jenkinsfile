pipeline {
    agent {
        label "daniel"
    }
    
    
    stages {
        stage('Tf init and validate') {
            steps {

                sh 'terraform -chdir=./Terraform/multicloudk8s init'
                sh 'terraform -chdir=./Terraform/multicloudk8s validate'
                echo 'the validation of terraform is done'                
            }
        }

        stage('Tf apply') {
            steps {
                sh 'terraform -chdir=./Terraform/multicloudk8s apply -auto-approve'
                echo 'the Infrastructure of terraform is done'                
            }
        }

        stage('Preparing CM') {
            steps {
                sh 'ansible-inventory -i ./ansible-ws --graph'
                echo 'run the follow command to connect server by terraform "ssh -i k8s-multi-cloud-key-public ubuntu@<ip-address>"'           
            }
        }

        stage('Running playbook') {
            steps {
                sh 'sudo ansible-playbook ./ansible-ws/site.yml'
                echo 'The configuration of ubuntu is done'        
            }
        }

        stage('destroying Terraform') {
            steps {
                echo 'if you want to connect by ssh run cat /home/daniel/Documents/PersonalRepository/Demo-ScotiaTech/ansible-ws/inventory'
                echo 'and run ssh -i k8s-multi-cloud-key-public ubuntu@3.138.181.196'
                script {
                    def userInput = input(id: 'Proceed1', message: 'Promote build?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']])
                    echo 'userInput: ' + userInput

                    if(userInput == true) {
                        sh 'terraform -chdir=./Terraform/multicloudk8s destroy -auto-approve'
                        echo 'The configuration of AWS has gone' 
                    } else {
                        echo "AWS keep running"
                    }
                }    
       
            }
        }

        stage('build/maven') {
            steps {
                sh 'mvn clean compile install -DskipTests -f=./k8s-camel/'
                echo 'Build the proyect is ok'        
            }
        }

        stage("Unit Test") {
            steps {
                echo "Init Unit Test"
                sh "mvn test camel:route-coverage -f ./k8s-camel/"
                echo "End Unit Test"
            }
        }

        stage("Build Image/Docker") {
            steps {
                echo "Init build image with docker"
                sh "docker build ./k8s-camel/ -t demoscotia"
                echo "End Building the image"
            }
        }

        stage("deploy and run Image to cluster") {
            steps {
                echo "Running image with docker"
                sh "minikube image load demoscotia:latest"
                sh "kubectl apply -f ./k8s-camel/configuration/openshift/template-ms-fuse-dev.yml"
                echo "Running pod"
            }
        }
    }

      post {
        failure {
            sh 'terraform -chdir=./Terraform/multicloudk8s destroy -auto-approve'
        }
        success {
            sh 'minikube service --url service-camel-k8s-scotia'
        }

  }
}